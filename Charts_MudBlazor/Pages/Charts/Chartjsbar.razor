@page "/Chartjsbar"
@using PSC.Blazor.Components.Chartjs
@using PSC.Blazor.Components.Chartjs.Enums
@using PSC.Blazor.Components.Chartjs.Models
@using PSC.Blazor.Components.Chartjs.Models.Common
@using PSC.Blazor.Components.Chartjs.Models.Bar
@using PSC.Blazor.Components.Chartjs.Models.Line
@using Charts_MudBlazor.Pages.Chartjs

<h3>Example ChartJs Bar & Area Charts</h3><br />

<div class="d-flex p-2 justify-content-start flex-wrap">

<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config1" @ref="_chart1"></Chart>
</div>
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config2" @ref="_chart2"></Chart>
</div>
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config3" @ref="_chart3"></Chart>
</div>
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config4" @ref="_chart4"></Chart>
</div>
</div>

<br />
<h3>Example ChartJs Line Charts</h3><br />

<div class="d-flex p-2 justify-content-start flex-wrap">
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config5" @ref="_chart5"></Chart>
</div>
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config6" @ref="_chart6"></Chart>
</div>
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config7" @ref="_chart7"></Chart>
</div>
</div>









@code {
    private BarChartConfig? _config1;
    private Chart? _chart1;
    private BarChartConfig? _config2;
    private Chart? _chart2;
    private BarChartConfig? _config3;
    private Chart? _chart3;

    private LineChartConfig? _config4;
    private Chart? _chart4;
    private LineChartConfig? _config5;
    private Chart? _chart5;
    private LineChartConfig? _config6;
    private Chart? _chart6;
    private LineChartConfig? _config7;
    private Chart? _chart7;


    protected override async Task OnInitializedAsync()
    {
        _config1 = new BarChartConfig()
            {
                Options = new Options()
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Align = PSC.Blazor.Components.Chartjs.Models.Common.Align.Center,
                            Display = false,
                            Position = LegendPosition.Right
                        }
                    },
                    Scales = new Dictionary<string, Axis>()
            {
                {
                    Scales.XAxisId, new Axis()
                    {
                        Stacked = true,
                        Ticks = new Ticks()
                        {
                            MaxRotation = 0,
                            MinRotation = 0
                        }
                    }
                },
                {
                    Scales.YAxisId, new Axis()
                    {
                        Stacked = true
                    }
                }
            }
                }
            };

        _config1.Data.Labels = BarDataExamples.SimpleBarText;
        _config1.Data.Datasets.Add(new BarDataset()
            {
                Label = "Value",
                Data = BarDataExamples.SimpleBar.Select(l => l.Value).ToList(),
                BackgroundColor = Chartjs.Colors.Palette1,
                BorderColor = Chartjs.Colors.PaletteBorder1,
                BorderWidth = 1
            });

        _config2 = new BarChartConfig()
            {
                Options = new Options()
                {
                    IndexAxis = "y",
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Align = PSC.Blazor.Components.Chartjs.Models.Common.Align.Center,
                            Display = false,
                            Position = LegendPosition.Right
                        }
                    },
                    Scales = new Dictionary<string, Axis>()
            {
                {
                    Scales.XAxisId, new Axis()
                    {
                        Stacked = true,
                        Ticks = new Ticks()
                        {
                            MaxRotation = 0,
                            MinRotation = 0
                        }
                    }
                },
                {
                    Scales.YAxisId, new Axis()
                    {
                        Stacked = true
                    }
                }
            }
                }
            };

        _config2.Data.Labels = BarDataExamples.SimpleBarText;
        _config2.Data.Datasets.Add(new BarDataset()
            {
                Label = "Value",
                Data = BarDataExamples.SimpleBar.Select(l => l.Value).ToList(),
                BackgroundColor = Chartjs.Colors.Palette1,
                BorderColor = Chartjs.Colors.PaletteBorder1,
                BorderWidth = 1
            });

        _config3 = new BarChartConfig()
            {
                Options = new Options()
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Align = PSC.Blazor.Components.Chartjs.Models.Common.Align.Center,
                            Display = true,
                            Position = LegendPosition.Right
                        }
                    },
                    Scales = new Dictionary<string, Axis>()
                {
                    {
                        Scales.XAxisId, new Axis()
                        {
                            Stacked = true,
                            Ticks = new Ticks()
                            {
                                MaxRotation = 0,
                                MinRotation = 0
                            }
                        }
                    },
                    {
                        Scales.YAxisId, new Axis()
                        {
                            Stacked = true
                        }
                    }
                },
                    IndexAxis = Axes.Y
                }
            };

        _config3.Data.Labels = BarDataExamples.GroupedLabels;
        _config3.Data.Datasets.Add(new BarDataset()
            {
                Label = "Value",
                Data = BarDataExamples.Grouped1,
                BackgroundColor = new List<string>() { Chartjs.Colors.Palette1.First() },
                BorderColor = new List<string>() { Chartjs.Colors.Palette1.First() },
                BorderWidth = 1
            });
        _config3.Data.Datasets.Add(new BarDataset()
            {
                Label = "Value2",
                Data = BarDataExamples.Grouped2,
                BackgroundColor = new List<string>() { Chartjs.Colors.PaletteBorder1.First() },
                BorderColor = new List<string>() { Chartjs.Colors.PaletteBorder1.First() },
                BorderWidth = 1
            });

        _config4 = new LineChartConfig()
            {
                Options = new Options()
                {
                    Responsive = true,
                    MaintainAspectRatio = false
                }
            };

        _config4.Data.Labels = LineDataExamples.SimpleLineText;
        _config4.Data.Datasets.Add(new LineDataset()
            {
                Label = "First Dataset",
                Data = LineDataExamples.SimpleLine.ToList(),
                BorderColor = Chartjs.Colors.PaletteBorder1.FirstOrDefault(),
                Fill = false
            });
        _config4.Data.Datasets.Add(new LineDataset()
            {
                Label = "Second Dataset",
                Data = LineDataExamples.SimpleLine2.ToList(),
                BackgroundColor = "rgba(75,192,192,0.2)",
                BorderColor = "rgba(75,192,192,1)",
                Fill = true
            });

        _config5 = new LineChartConfig()
        {
        };

        _config5.Data.Labels = LineDataExamples.SimpleLineText;
        _config5.Data.Datasets.Add(new LineDataset()
        {
            Label = "First Dataset",
            Data = LineDataExamples.SimpleLine.ToList(),
            BorderColor = Chartjs.Colors.PaletteBorder1.FirstOrDefault(),
            Tension = 0.1M,
            Fill = false,
            PointRadius= 15,
            PointStyle = PointStyle.Cross
        });

        _config6 = new LineChartConfig()
            {
                Options = new Options()
                {
                    Plugins = new Plugins()
                    {
                        Crosshair = new Crosshair()
                        {
                            Horizontal = new CrosshairLine()
                            {
                                Color = Chartjs.Colors.PaletteBorder1[0]
                            },
                            Vertical = new CrosshairLine()
                            {
                                Color = Chartjs.Colors.PaletteBorder1[0]
                            }
                        }
                    }
                }
            };

        _config6.Data.Labels = LineDataExamples.SimpleLineText;
        _config6.Data.Datasets.Add(new LineDataset()
            {
                Label = "My First Dataset",
                Data = LineDataExamples.SimpleLine.ToList(),
                BorderColor = Chartjs.Colors.PaletteBorder1.FirstOrDefault(),
                Tension = 0.1M,
                Fill = false
            });

        _config7 = new LineChartConfig()
            {
                Options = new Options()
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Animations = new Animations()
                    {
                        Tension = new Tension()
                        {
                            Duration = 1000,
                            Easing = "linear",
                            From = 1,
                            To = 0,
                            Loop = true
                        }
                    },
                    Scales = new Dictionary<string, Axis>()
            {
                {
                    Scales.YAxisId, new Axis()
                    {
                        Min = 0,
                        Max = 100
                    }
                }
            }
                }
            };

        _config7.Data.Labels = LineDataExamples.SimpleLineText;
        _config7.Data.Datasets.Add(new LineDataset()
            {
                Label = "Looping tension",
                Data = AnimationExamples.SimpleLine.ToList(),
                BorderColor = Chartjs.Colors.PaletteBorder1.FirstOrDefault(),
                Fill = false
            });
    }
}
