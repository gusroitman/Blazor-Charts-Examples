@page "/Chartjsbubble"
@using PSC.Blazor.Components.Chartjs
@using PSC.Blazor.Components.Chartjs.Enums
@using PSC.Blazor.Components.Chartjs.Models
@using PSC.Blazor.Components.Chartjs.Models.Common
@using PSC.Blazor.Components.Chartjs.Models.Bar
@using PSC.Blazor.Components.Chartjs.Models.Bubble
@using PSC.Blazor.Components.Chartjs.Models.Doughnut
@using PSC.Blazor.Components.Chartjs.Models.Line
@using PSC.Blazor.Components.Chartjs.Models.Pie
@using PSC.Blazor.Components.Chartjs.Models.Polar
@using PSC.Blazor.Components.Chartjs.Models.Radar
@using PSC.Blazor.Components.Chartjs.Models.Scatter
@using Charts_MudBlazor.Pages.Chartjs

<h3>Example ChartJs Pie & Donut Charts</h3><br />

<div class="d-flex p-2 justify-content-start flex-wrap">

<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config1" @ref="_chart1"></Chart>
</div>
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config2" @ref="_chart2"></Chart>
</div>
<div class="g-col-6 g-col-md-4" style="min-width:400px;max-width:500px">
<Chart Config="_config3" @ref="_chart3"></Chart>
</div>
</div>

@code {
    private BubbleChartConfig? _config1;
    private Chart? _chart1;

    private ScatterChartConfig? _config2;
    private Chart? _chart2;
    private ScatterChartConfig? _config3;
    private Chart? _chart3;

    protected override async Task OnInitializedAsync()
    {
        _config1 = new BubbleChartConfig()
        {
        };

        _config1.Data.Labels = BubbleDataExamples.SimpleBubbleText;
        _config1.Data.Datasets.Add(new BubbleDataset()
            {
                Label = "First Dataset",
                Data = BubbleDataExamples.SimpleBubble,
                BackgroundColor = Chartjs.Colors.PaletteBorder1.FirstOrDefault()
            });

        _config2 = new ScatterChartConfig()
        {
        };

        _config2.Data.Datasets.Add(new ScatterDataset()
            {
                BackgroundColor = "rgb(255, 99, 132)",
                Label = ScatterDataExamples.ScatterSimpleText,
                Data = ScatterDataExamples.ScatterDatasets
            });

        _config3 = new ScatterChartConfig()
            {
                Options = new Options()
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Scales = new Dictionary<string, Axis>()
            {
                {
                    Scales.YAxisId, new Axis()
                    {
                        Type = "linear",
                        Position = PSC.Blazor.Components.Chartjs.Models.Common.Position.Left,
                        Ticks = new Ticks()
                        {
                            Color = "rgb(255, 0, 0)"
                        }
                    }
                },
                {
                    Scales.Y2AxisId, new Axis()
                    {
                        Type = "linear",
                        Position = PSC.Blazor.Components.Chartjs.Models.Common.Position.Right,
                        Ticks = new Ticks()
                        {
                            Color = "rgb(0, 0, 255)"
                        }
                    }
                }
            }
                }
            };

        _config3.Data.Datasets.Add(new ScatterDataset()
            {
                BackgroundColor = "rgb(255, 99, 132)",
                BorderColor = "rgb(255, 0, 0)",
                Label = ScatterDataExamples.ScatterSimpleText,
                Data = ScatterDataExamples.ScatterDatasets,
                YAxisId = "y"
            });
        _config3.Data.Datasets.Add(new ScatterDataset()
            {
                BackgroundColor = "rgb(0, 0, 230)",
                BorderColor = "rgb(0, 0, 255)",
                Label = ScatterDataExamples.ScatterMultiAxes,
                Data = ScatterDataExamples.ScatterMultiAxesDatasets,
                Y2AxisId = "y2"
            });
    }
}